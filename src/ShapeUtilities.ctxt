#BlueJ class context
comment0.params=
comment0.target=ShapeUtilities()
comment0.text=\r\n\ Prevents\ instantiation.\r\n
comment1.params=s1\ s2
comment1.target=boolean\ equal(java.awt.Shape,\ java.awt.Shape)
comment1.text=public\ static\ Shape\ clone(final\ Shape\ shape)\ {\r\n\r\n\ \ \ \ \ \ \ \ if\ (shape\ instanceof\ Cloneable)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ try\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ (Shape)\ ObjectUtilities.clone(shape);\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ catch\ (CloneNotSupportedException\ cnse)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ final\ Shape\ result\ \=\ null;\r\n\ \ \ \ \ \ \ \ return\ result;\r\n\ \ \ \ }\r\n\r\n\ \ \ \ /**\r\n\ Tests\ two\ shapes\ for\ equality.\ \ If\ both\ shapes\ are\ <code>null</code>,\r\n\ this\ method\ will\ return\ <code>true</code>.\r\n\ <p>\r\n\ In\ the\ current\ implementation,\ the\ following\ shapes\ are\ supported\:\r\n\ <code>Ellipse2D</code>,\ <code>Line2D</code>\ and\ <code>Rectangle2D</code>\r\n\ (implicit).\r\n\r\n\ @param\ s1\ \ the\ first\ shape\ (<code>null</code>\ permitted).\r\n\ @param\ s2\ \ the\ second\ shape\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment10.params=g2\ shape\ angle\ x\ y
comment10.target=void\ drawRotatedShape(java.awt.Graphics2D,\ java.awt.Shape,\ double,\ float,\ float)
comment10.text=\r\n\ Draws\ a\ shape\ with\ the\ specified\ rotation\ about\ <code>(x,\ y)</code>.\r\n\r\n\ @param\ g2\ \ the\ graphics\ device\ (<code>null</code>\ not\ permitted).\r\n\ @param\ shape\ \ the\ shape\ (<code>null</code>\ not\ permitted).\r\n\ @param\ angle\ \ the\ angle\ (in\ radians).\r\n\ @param\ x\ \ the\ x\ coordinate\ for\ the\ rotation\ point.\r\n\ @param\ y\ \ the\ y\ coordinate\ for\ the\ rotation\ point.\r\n
comment11.params=l\ t
comment11.target=java.awt.Shape\ createDiagonalCross(float,\ float)
comment11.text=\r\n\ Creates\ a\ diagonal\ cross\ shape.\r\n\r\n\ @param\ l\ \ the\ length\ of\ each\ 'arm'.\r\n\ @param\ t\ \ the\ thickness.\r\n\r\n\ @return\ A\ diagonal\ cross\ shape.\r\n
comment12.params=l\ t
comment12.target=java.awt.Shape\ createRegularCross(float,\ float)
comment12.text=\r\n\ Creates\ a\ diagonal\ cross\ shape.\r\n\r\n\ @param\ l\ \ the\ length\ of\ each\ 'arm'.\r\n\ @param\ t\ \ the\ thickness.\r\n\r\n\ @return\ A\ diagonal\ cross\ shape.\r\n
comment13.params=s
comment13.target=java.awt.Shape\ createDiamond(float)
comment13.text=\r\n\ Creates\ a\ diamond\ shape.\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ diamond).\r\n\r\n\ @return\ A\ diamond\ shape.\r\n
comment14.params=s
comment14.target=java.awt.Shape\ createUpTriangle(float)
comment14.text=\r\n\ Creates\ a\ triangle\ shape\ that\ points\ upwards.\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment15.params=s
comment15.target=java.awt.Shape\ createUpVMark(float)
comment15.text=\r\n\ Creates\ a\ V\ shape\ that\ points\ upwards.\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment16.params=s
comment16.target=java.awt.Shape\ createUpDPTriangle(float)
comment16.text=\r\n\ Creates\ a\ right-angled\ triangle\ shape\ that\ points\ upwards\ for\ declared\ DutyPoint\ marking\ ,\r\n\ used\ when\ DDP\ is\ not\ greater\ than\ observed\ DP\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment17.params=s
comment17.target=java.awt.Shape\ createUpVMarkNarrow(float)
comment17.text=\r\n\ Creates\ a\ V\ Mark\ (narrow)\ shape\ that\ points\ upwards\ for\ marking\ .\r\n\ \r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment18.params=s
comment18.target=java.awt.Shape\ createDownTriangle(float)
comment18.text=\r\n\ Creates\ a\ triangle\ shape\ that\ points\ downwards.\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment19.params=s
comment19.target=java.awt.Shape\ createLMark(float)
comment19.text=\r\n\ Creates\ a\ 'L'shape\ that\ points\ downwards.\r\n\r\n\ @param\ s\ \ the\ size\ factor\ (equal\ to\ half\ the\ height\ of\ the\ triangle).\r\n\r\n\ @return\ A\ triangle\ shape.\r\n
comment2.params=l1\ l2
comment2.target=boolean\ equal(java.awt.geom.Line2D,\ java.awt.geom.Line2D)
comment2.text=\r\n\ Compares\ two\ lines\ are\ returns\ <code>true</code>\ if\ they\ are\ equal\ or\r\n\ both\ <code>null</code>.\r\n\r\n\ @param\ l1\ \ the\ first\ line\ (<code>null</code>\ permitted).\r\n\ @param\ l2\ \ the\ second\ line\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment20.params=line\ width
comment20.target=java.awt.Shape\ createLineRegion(java.awt.geom.Line2D,\ float)
comment20.text=\r\n\ Creates\ a\ region\ surrounding\ a\ line\ segment\ by\ 'widening'\ the\ line\r\n\ segment.\ \ A\ typical\ use\ for\ this\ method\ is\ the\ creation\ of\ a\r\n\ 'clickable'\ region\ for\ a\ line\ that\ is\ displayed\ on-screen.\r\n\r\n\ @param\ line\ \ the\ line\ (<code>null</code>\ not\ permitted).\r\n\ @param\ width\ \ the\ width\ of\ the\ region.\r\n\r\n\ @return\ A\ region\ that\ surrounds\ the\ line.\r\n
comment21.params=x\ y\ area
comment21.target=java.awt.geom.Point2D\ getPointInRectangle(double,\ double,\ java.awt.geom.Rectangle2D)
comment21.text=\r\n\ Returns\ a\ point\ based\ on\ (x,\ y)\ but\ constrained\ to\ be\ within\ the\ bounds\r\n\ of\ a\ given\ rectangle.\r\n\r\n\ @param\ x\ \ the\ x-coordinate.\r\n\ @param\ y\ \ the\ y-coordinate.\r\n\ @param\ area\ \ the\ constraining\ rectangle\ (<code>null</code>\ not\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ permitted).\r\n\r\n\ @return\ A\ point\ within\ the\ rectangle.\r\n\r\n\ @throws\ NullPointerException\ if\ <code>area</code>\ is\ <code>null</code>.\r\n
comment22.params=rect1\ rect2
comment22.target=boolean\ contains(java.awt.geom.Rectangle2D,\ java.awt.geom.Rectangle2D)
comment22.text=\r\n\ Checks,\ whether\ the\ given\ rectangle1\ fully\ contains\ rectangle\ 2\r\n\ (even\ if\ rectangle\ 2\ has\ a\ height\ or\ width\ of\ zero\!).\r\n\r\n\ @param\ rect1\ \ the\ first\ rectangle.\r\n\ @param\ rect2\ \ the\ second\ rectangle.\r\n\r\n\ @return\ A\ boolean.\r\n
comment23.params=rect1\ rect2
comment23.target=boolean\ intersects(java.awt.geom.Rectangle2D,\ java.awt.geom.Rectangle2D)
comment23.text=\r\n\ Checks,\ whether\ the\ given\ rectangle1\ fully\ contains\ rectangle\ 2\r\n\ (even\ if\ rectangle\ 2\ has\ a\ height\ or\ width\ of\ zero\!).\r\n\r\n\ @param\ rect1\ \ the\ first\ rectangle.\r\n\ @param\ rect2\ \ the\ second\ rectangle.\r\n\r\n\ @return\ A\ boolean.\r\n
comment3.params=e1\ e2
comment3.target=boolean\ equal(java.awt.geom.Ellipse2D,\ java.awt.geom.Ellipse2D)
comment3.text=\r\n\ Compares\ two\ ellipses\ and\ returns\ <code>true</code>\ if\ they\ are\ equal\ or\r\n\ both\ <code>null</code>.\r\n\r\n\ @param\ e1\ \ the\ first\ ellipse\ (<code>null</code>\ permitted).\r\n\ @param\ e2\ \ the\ second\ ellipse\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment4.params=a1\ a2
comment4.target=boolean\ equal(java.awt.geom.Arc2D,\ java.awt.geom.Arc2D)
comment4.text=\r\n\ Compares\ two\ arcs\ and\ returns\ <code>true</code>\ if\ they\ are\ equal\ or\r\n\ both\ <code>null</code>.\r\n\r\n\ @param\ a1\ \ the\ first\ arc\ (<code>null</code>\ permitted).\r\n\ @param\ a2\ \ the\ second\ arc\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment5.params=p1\ p2
comment5.target=boolean\ equal(java.awt.Polygon,\ java.awt.Polygon)
comment5.text=\r\n\ Tests\ two\ polygons\ for\ equality.\ \ If\ both\ are\ <code>null</code>\ this\r\n\ method\ returns\ <code>true</code>.\r\n\r\n\ @param\ p1\ \ polygon\ 1\ (<code>null</code>\ permitted).\r\n\ @param\ p2\ \ polygon\ 2\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment6.params=p1\ p2
comment6.target=boolean\ equal(java.awt.geom.GeneralPath,\ java.awt.geom.GeneralPath)
comment6.text=\r\n\ Tests\ two\ polygons\ for\ equality.\ \ If\ both\ are\ <code>null</code>\ this\r\n\ method\ returns\ <code>true</code>.\r\n\r\n\ @param\ p1\ \ path\ 1\ (<code>null</code>\ permitted).\r\n\ @param\ p2\ \ path\ 2\ (<code>null</code>\ permitted).\r\n\r\n\ @return\ A\ boolean.\r\n
comment7.params=shape\ transX\ transY
comment7.target=java.awt.Shape\ createTranslatedShape(java.awt.Shape,\ double,\ double)
comment7.text=\r\n\ Creates\ and\ returns\ a\ translated\ shape.\r\n\r\n\ @param\ shape\ \ the\ shape\ (<code>null</code>\ not\ permitted).\r\n\ @param\ transX\ \ the\ x\ translation\ (in\ Java2D\ space).\r\n\ @param\ transY\ \ the\ y\ translation\ (in\ Java2D\ space).\r\n\r\n\ @return\ The\ translated\ shape.\r\n
comment8.params=shape\ anchor\ locationX\ locationY
comment8.target=java.awt.Shape\ createTranslatedShape(java.awt.Shape,\ RectangleAnchor,\ double,\ double)
comment8.text=\r\n\ Translates\ a\ shape\ to\ a\ new\ location\ such\ that\ the\ anchor\ point\r\n\ (relative\ to\ the\ rectangular\ bounds\ of\ the\ shape)\ aligns\ with\ the\r\n\ specified\ (x,\ y)\ coordinate\ in\ Java2D\ space.\r\n\r\n\ @param\ shape\ \ the\ shape\ (<code>null</code>\ not\ permitted).\r\n\ @param\ anchor\ \ the\ anchor\ (<code>null</code>\ not\ permitted).\r\n\ @param\ locationX\ \ the\ x-coordinate\ (in\ Java2D\ space).\r\n\ @param\ locationY\ \ the\ y-coordinate\ (in\ Java2D\ space).\r\n\r\n\ @return\ A\ new\ and\ translated\ shape.\r\n
comment9.params=base\ angle\ x\ y
comment9.target=java.awt.Shape\ rotateShape(java.awt.Shape,\ double,\ float,\ float)
comment9.text=\r\n\ Rotates\ a\ shape\ about\ the\ specified\ coordinates.\r\n\r\n\ @param\ base\ \ the\ shape\ (<code>null</code>\ permitted,\ returns\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <code>null</code>).\r\n\ @param\ angle\ \ the\ angle\ (in\ radians).\r\n\ @param\ x\ \ the\ x\ coordinate\ for\ the\ rotation\ point\ (in\ Java2D\ space).\r\n\ @param\ y\ \ the\ y\ coordinate\ for\ the\ rotation\ point\ (in\ Java2D\ space).\r\n\r\n\ @return\ the\ rotated\ shape.\r\n
numComments=24
